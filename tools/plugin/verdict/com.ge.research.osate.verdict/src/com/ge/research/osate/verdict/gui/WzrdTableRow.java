/*
 * BSD 3-Clause License
 * 
 * Copyright (c) 2023, General Electric Company.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.ge.research.osate.verdict.gui;

import java.io.Serializable;

/** Author: Soumya Talukder Date: Jul 18, 2019 */

// A data-structure used to store contents of a row in the StatementEditor tableViewer
public class WzrdTableRow implements Serializable, Cloneable {

    private static final long serialVersionUID = 1L;
    private Integer firstElement; // contains the index corresponding to the first drop-down cell in
    // StatementEditor window
    private Integer
            secondElement; // contains the index corresponding to the second drop-down cell in
    // StatementEditor window
    private String thirdElement; // contains the definition in a row
    private String formulaID = ""; // contains the ID of the cyber-property
    private boolean newRow =
            true; // boolean information regarding whether the row corresponds to an existing
    // content in .aadl or added newly
    private int offset; // contains the offset of the (existing) cyber-property in the .aadl file
    private int length; // contains the length of the (existing) cyber-property in the .aadl file
    private String
            verdictStatement; // contains the verdict statement generated by Wizard before writing
    // into the
    // .aadl file
    private String comment =
            null; // contains the comment field of (existing) cyber property (Note: Wizard doesn't
    // provide feature to edit this fields)
    private String description =
            null; // contains the description field of (existing) cyber property (Note: Wizard
    // doesn't provide feature to edit this fields)
    private String phase =
            null; // contains the phase field of (existing) cyber property (Note: Wizard doesn't
    // provide feature to edit this fields)
    private String external =
            null; // contains the external field of (existing) cyber property (Note: Wizard
    // doesn't provide feature to edit this fields)

    public String getThirdElement() {
        return thirdElement;
    }

    public void setThirdElement(String str) {
        this.thirdElement = str;
    }

    public String getVerdictStatement() {
        return verdictStatement;
    }

    public void setVerdictStatement(String str) {
        this.verdictStatement = str;
    }

    public String getFormulaID() {
        return formulaID;
    }

    public void setFormulaID(String str) {
        this.formulaID = str;
    }

    public Integer getSecondElement() {
        return secondElement;
    }

    public void setSecondElement(Integer i) {
        this.secondElement = i;
    }

    public Integer getFirstElement() {
        return firstElement;
    }

    public void setFirstElement(Integer i) {
        this.firstElement = i;
    }

    public boolean isNew() {
        return newRow;
    }

    public void setNewRow(boolean bool) {
        this.newRow = bool;
    }

    public Integer getOffset() {
        return offset;
    }

    public void setOffset(Integer i) {
        this.offset = i;
    }

    public Integer getLength() {
        return length;
    }

    public void setLength(Integer i) {
        this.length = i;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String str) {
        this.comment = str;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String str) {
        this.description = str;
    }

    public String getPhase() {
        return phase;
    }

    public void setPhase(String str) {
        this.phase = str;
    }

    public String getExternal() {
        return external;
    }

    public void setExternal(String str) {
        this.external = str;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
