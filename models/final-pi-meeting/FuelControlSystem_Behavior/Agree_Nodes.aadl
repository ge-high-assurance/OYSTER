package Agree_Nodes
public
	annex agree{**
		node InitiallyHolds(X: bool) returns (Y: bool);
		let
  			Y = X -> true;
		tel;	
		
		node FirstBool( X : bool) returns ( Y : bool);
		let 
			Y = X -> pre (Y);
		tel;
		
		node Once(x : bool) returns (Y : bool);
		let
			Y = x or (false -> pre (Y));
		tel;
		
		node HasHappened(X : bool) returns (Y : bool);
		let
  			Y = X or (false -> pre (Y)) ;
		tel;
	
	
		node HasHappenedBefore(X : bool) returns (Y : bool);
		let
  			Y = not X and false ->HasHappened(pre (X)) ;
		tel;
		
		node Sofar(X : bool ) returns ( Y : bool );
		let
 			Y = X -> (X and (pre(Y)));
		tel;
		
		node Before (X : bool) returns (Y : bool);
		let
			Y = false -> pre (X);
		tel;
		
		node SinceIncl( X : bool, Y : bool ) returns ( Z : bool );
		let
		  Z =  Y and (X or (false -> pre (Z)));
		tel;
		
		node Since( X : bool, Y : bool ) returns ( Z : bool );
		let
		  Z =  X or (Y and (false -> pre (Z)));
		tel;
	**};
	
end Agree_Nodes;